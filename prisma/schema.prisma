datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  password      String?
  image         String?
  coverImage    String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  accounts      Account[]
  sessions      Session[]
  favorites     FavoritesOnUsers[]
  likes         LikedOnUsers[]
  posts         Post[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String             @id @default(cuid())
  title         String?
  content       String?
  postType      PostType           @relation(fields: [postTypeId], references: [id])
  featuredImage String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  comments      Comment[]
  author        User               @relation(fields: [userId], references: [id])
  postTypeId    String
  favoritedBy   FavoritesOnUsers[]
  likedBy       LikedOnUsers[]
  location      String?
  userId        String
}

model PostType {
  id           String @id @default(cuid())
  postTypeName String @unique
  Post         Post[]
}

model Comment {
  id        String   @id @default(cuid())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  content   String
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoritesOnUsers {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([userId, postId])
}

model LikedOnUsers {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([userId, postId])
}
